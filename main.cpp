#include "widget.h"

#include <QApplication>
#include <xresample.h>
/**
面向对象五大原则
所有的设计模式都是这五大设计原则的特化，
理解透彻之后结合项目经验，学习23种设计模式也是非常快的
-------------------------
原则1
单一指责
在c中一个功能对应一个模块,比如ffmpeg新版本
的avcodec负责audio和vedio的encode和decode，
swscale负责视频的尺寸和像素格式转换
swresample负责音频的格式和采样率的转换
在c++中就是一个功能一个类
好处:耦合低，一个功能中很少有不需要的功能的代码
------------------------------------
原则2
开闭原则
对改代码封闭，对加代码开放
即已经经过单元测试的代码是稳定使用的，不到万不得已不要修改
而是通过加代码的方式实现新的需要
好处:如果修改稳定代码，造成的后果就是整个团队都要跟着改代码，还可能把已经完成的功能改崩

-------------------------------------
原则3
替换原则
子类可以替换父类
即为子类继承而不修改父类的功能，如果有不一样的功能，子类应该单独开接口而不是修改继承的功能
简单说就是 不修改继承的功能

-------------------------------------
原则4
接口隔离
提供多个小接口而不是一个大接口
假设有50个小接口，每个接口需要传两个参数，所有参数不重复，如果写成一个大接口则需要
传入100个参数
简单的说就是偏好小接口
优点:如果有一百个类使用某个类的大接口，当大接口需要修改部分功能时，一共需要修改101个类
如果写成小接口，这一百个类使用的肯定是不同的小接口，发生改变只需要修改小接口和使用小
接口的那一部分类

-----------------------------------
原则5
依赖倒置
业务层使用抽象类(java中的接口类)的接口
底层继承并实现抽象类的接口

好处:如果没有抽象类而是上层直接使用底层类，上层改，底层也要改，同样的，底层改上层也要改
如果上层使用抽象类，底层实现抽象类，则上层改时，底层可以不改，底层改时，上层也可以不改

 */

#include<widget.h>


int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    Widget w;
    w.show();
    return a.exec();
}
